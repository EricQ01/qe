#include "graph.h"
#include <iostream>

using namespace qe;


//     0 o--o 1
//        \ |
//         \|
//          o 2
void print_Graph(const Graph<3>& graph) {
	using std::cout;
	const auto& g = graph.get_adjacency_matrix();
	cout << "o" << (g(0, 1) ? "--" : "  ") << "o\n";
	cout << ' ' << (g(0, 2) ? '\\' : ' ') << ' ' << (g(1, 2) ? '|' : ' ') << '\n';
	cout << ' ' << ' ' << (g(0, 2) ? '\\' : ' ') << (g(1, 2) ? '|' : ' ') << '\n';
	cout << "    o\n";
}


//     0 o--o 1
//       |\/|
//       |/\|
//     3 o--o 2
void print_Graph(const Graph<4>& graph) {
	using std::cout;
	const auto& g = graph.get_adjacency_matrix();
	cout << "o" << (g(0, 1) ? "--" : "  ") << "o\n";
	cout << (g(0, 3) ? '|' : ' ') << (g(0, 2) ? '\\' : ' ') << (g(1, 3) ? '/' : ' ') << (g(1, 2) ? '|' : ' ') << '\n';
	cout << (g(0, 3) ? '|' : ' ') << (g(1, 3) ? '/' : ' ') << (g(0, 2) ? '\\' : ' ') << (g(1, 2) ? '|' : ' ') << '\n';
	cout << "o" << (g(2, 3) ? "--" : "  ") << "o\n";
}

//          0     1
//           o---o     
//           |   |\
//           |\ /|.\
//           | X |  o 2
//           |/ \|./
//           | . |/	
//           o---o	
//          4     3
void print_Graph(const Graph<5>& graph) {
	using std::cout;
	const auto& g = graph.get_adjacency_matrix();
	cout << "   o" << (g(0, 1) ? "---" : "   ") << "o\n  ";
	cout << ' ' << (g(0, 4) ? '|' : g(0, 3) ? '\\' : ' ') << ' ' << (g(0, 2) ? '.' : ' ') << ' ' << (g(1, 3) ? '|' : g(1, 4) ? '/' : ' ') << (g(1, 2) ? '\\' : ' ') << '\n' << ' ';
	cout << ' ' << ' ' << (g(0, 4) ? '|' : ' ') << (g(0, 3) ? '\\' : ' ') << ' ' << (g(1, 4) ? '/' : ' ') << (g(1, 3) ? '|' : ' ') << (g(0, 2) ? '.' : ' ') << (g(1, 2) ? '\\' : ' ') << '\n';
	cout << ' ' << ' ' << ' ' << (g(0, 4) ? '|' : ' ') << ' ' << (g(0, 3) && g(1, 4) ? 'X' : (g(0, 3) ? '\\' : (g(1, 4) ? '/' : ' ')))
		<< ' ' << (g(1, 3) ? '|' : ' ') << ' ' << ' ' << "o\n ";
	cout << ' ' << ' ' << (g(0, 4) ? '|' : ' ') << (g(1, 4) ? '/' : ' ') << ' ' << (g(0, 3) ? '\\' : ' ') << (g(1, 3) ? '|' : ' ') << (g(2, 4) ? '.' : ' ') << (g(2, 3) ? '/' : ' ') << '\n' << ' ' << ' ';
	cout << ' ' << (g(0, 4) ? '|' : g(1, 4) ? '/' : ' ') << ' ' << (g(2, 4) ? '.' : ' ') << ' ' << (g(1, 3) ? '|' : g(0, 3) ? '\\' : ' ') << (g(2, 3) ? '/' : ' ') << '\n';
	cout << "   o" << (g(3, 4) ? "---" : "   ") << "o\n";
}
//          0     1
//           o---o             o---o            o---o
//          /| . |\		      /| .		        |   /\
//         /.|\ /|.\	     / |\   .	        |  /  \
//      5 o--|-X-|--o 2     o  | \    o	     o  | /    o
//         \.|/ \|./	       |  \		      \ |/    /
//          \| . |/		       |   \	       \|    /
//           o---o		       o   o	        o---o
//          4     3
void print_Graph(const Graph<6>& graph) {
	using std::cout;
	const auto& g = graph.get_adjacency_matrix();
	cout << "   o" << (g(0, 1) ? "---" : "   ") << "o\n  ";
	cout << (g(0, 5) ? '/' : ' ') << (g(0, 4) ? '|' : g(0, 3) ? '\\' : ' ') << ' ' << (g(0, 2) || g(1, 5) ? '.' : ' ') << ' ' << (g(1, 3) ? '|' : g(1, 4) ? '/' : ' ') << (g(1, 2) ? '\\' : ' ') << '\n' << ' ';
	cout << (g(0, 5) ? '/' : ' ') << (g(1, 5) ? '.' : ' ') << (g(0, 4) ? '|' : ' ') << (g(0, 3) ? '\\' : ' ') << ' ' << (g(1, 4) ? '/' : ' ') << (g(1, 3) ? '|' : ' ') << (g(0, 2) ? '.' : ' ') << (g(1, 2) ? '\\' : ' ') << '\n';
	cout << 'o' << (g(2, 5) ? '-' : ' ') << (g(2, 5) ? '-' : ' ') << (g(0, 4) ? '|' : g(2, 5) ? '-' : ' ') << (g(2, 5) ? '-' : ' ') << (g(0, 3) && g(1, 4) ? 'X' : (g(0, 3) ? '\\' : (g(1, 4) ? '/' : (g(2, 5) ? '-' : ' '))))
		<< (g(2, 5) ? '-' : ' ') << (g(1, 3) ? '|' : g(2, 5) ? '-' : ' ') << (g(2, 5) ? '-' : ' ') << (g(2, 5) ? '-' : ' ') << "o\n ";
	cout << (g(4, 5) ? '\\' : ' ') << (g(3, 5) ? '.' : ' ') << (g(0, 4) ? '|' : ' ') << (g(1, 4) ? '/' : ' ') << ' ' << (g(0, 3) ? '\\' : ' ') << (g(1, 3) ? '|' : ' ') << (g(2, 4) ? '.' : ' ') << (g(2, 3) ? '/' : ' ') << '\n' << ' ' << ' ';
	cout << (g(4, 5) ? '\\' : ' ') << (g(0, 4) ? '|' : g(1, 4) ? '/' : ' ') << ' ' << (g(2, 4) || g(3, 5) ? '.' : ' ') << ' ' << (g(1, 3) ? '|' : g(0, 3) ? '\\' : ' ') << (g(2, 3) ? '/' : ' ') << '\n';
	cout << "   o" << (g(3, 4) ? "---" : "   ") << "o\n";
}

void print_Graph(const Graph<qe::dynamic>& graph) {
	using std::cout;
	const auto& g = graph.get_adjacency_matrix();
	switch (graph.num_vertices()) {
	case 3:
		cout << "o" << (g(0, 1) ? "--" : "  ") << "o\n";
		cout << ' ' << (g(0, 2) ? '\\' : ' ') << ' ' << (g(1, 2) ? '|' : ' ') << '\n';
		cout << ' ' << ' ' << (g(0, 2) ? '\\' : ' ') << (g(1, 2) ? '|' : ' ') << '\n';
		cout << "    o\n";
		break;
	case 4:
		cout << "o" << (g(0, 1) ? "--" : "  ") << "o\n";
		cout << (g(0, 3) ? '|' : ' ') << (g(0, 2) ? '\\' : ' ') << (g(1, 3) ? '/' : ' ') << (g(1, 2) ? '|' : ' ') << '\n';
		cout << (g(0, 3) ? '|' : ' ') << (g(1, 3) ? '/' : ' ') << (g(0, 2) ? '\\' : ' ') << (g(1, 2) ? '|' : ' ') << '\n';
		cout << "o" << (g(2, 3) ? "--" : "  ") << "o\n";
		break;
	case 5:
		cout << "   o" << (g(0, 1) ? "---" : "   ") << "o\n  ";
		cout << ' ' << (g(0, 4) ? '|' : g(0, 3) ? '\\' : ' ') << ' ' << (g(0, 2) ? '.' : ' ') << ' ' << (g(1, 3) ? '|' : g(1, 4) ? '/' : ' ') << (g(1, 2) ? '\\' : ' ') << '\n' << ' ';
		cout << ' ' << ' ' << (g(0, 4) ? '|' : ' ') << (g(0, 3) ? '\\' : ' ') << ' ' << (g(1, 4) ? '/' : ' ') << (g(1, 3) ? '|' : ' ') << (g(0, 2) ? '.' : ' ') << (g(1, 2) ? '\\' : ' ') << '\n';
		cout << ' ' << ' ' << ' ' << (g(0, 4) ? '|' : ' ') << ' ' << (g(0, 3) && g(1, 4) ? 'X' : (g(0, 3) ? '\\' : (g(1, 4) ? '/' : ' ')))
			<< ' ' << (g(1, 3) ? '|' : ' ') << ' ' << ' ' << "o\n ";
		cout << ' ' << ' ' << (g(0, 4) ? '|' : ' ') << (g(1, 4) ? '/' : ' ') << ' ' << (g(0, 3) ? '\\' : ' ') << (g(1, 3) ? '|' : ' ') << (g(2, 4) ? '.' : ' ') << (g(2, 3) ? '/' : ' ') << '\n' << ' ' << ' ';
		cout << ' ' << (g(0, 4) ? '|' : g(1, 4) ? '/' : ' ') << ' ' << (g(2, 4) ? '.' : ' ') << ' ' << (g(1, 3) ? '|' : g(0, 3) ? '\\' : ' ') << (g(2, 3) ? '/' : ' ') << '\n';
		cout << "   o" << (g(3, 4) ? "---" : "   ") << "o\n";
	case 6:
		cout << "   o" << (g(0, 1) ? "---" : "   ") << "o\n  ";
		cout << (g(0, 5) ? '/' : ' ') << (g(0, 4) ? '|' : g(0, 3) ? '\\' : ' ') << ' ' << (g(0, 2) || g(1, 5) ? '.' : ' ') << ' ' << (g(1, 3) ? '|' : g(1, 4) ? '/' : ' ') << (g(1, 2) ? '\\' : ' ') << '\n' << ' ';
		cout << (g(0, 5) ? '/' : ' ') << (g(1, 5) ? '.' : ' ') << (g(0, 4) ? '|' : ' ') << (g(0, 3) ? '\\' : ' ') << ' ' << (g(1, 4) ? '/' : ' ') << (g(1, 3) ? '|' : ' ') << (g(0, 2) ? '.' : ' ') << (g(1, 2) ? '\\' : ' ') << '\n';
		cout << 'o' << (g(2, 5) ? '-' : ' ') << (g(2, 5) ? '-' : ' ') << (g(0, 4) ? '|' : g(2, 5) ? '-' : ' ') << (g(2, 5) ? '-' : ' ') << (g(0, 3) && g(1, 4) ? 'X' : (g(0, 3) ? '\\' : (g(1, 4) ? '/' : (g(2, 5) ? '-' : ' '))))
			<< (g(2, 5) ? '-' : ' ') << (g(1, 3) ? '|' : g(2, 5) ? '-' : ' ') << (g(2, 5) ? '-' : ' ') << (g(2, 5) ? '-' : ' ') << "o\n ";
		cout << (g(4, 5) ? '\\' : ' ') << (g(3, 5) ? '.' : ' ') << (g(0, 4) ? '|' : ' ') << (g(1, 4) ? '/' : ' ') << ' ' << (g(0, 3) ? '\\' : ' ') << (g(1, 3) ? '|' : ' ') << (g(2, 4) ? '.' : ' ') << (g(2, 3) ? '/' : ' ') << '\n' << ' ' << ' ';
		cout << (g(4, 5) ? '\\' : ' ') << (g(0, 4) ? '|' : g(1, 4) ? '/' : ' ') << ' ' << (g(2, 4) || g(3, 5) ? '.' : ' ') << ' ' << (g(1, 3) ? '|' : g(0, 3) ? '\\' : ' ') << (g(2, 3) ? '/' : ' ') << '\n';
		cout << "   o" << (g(3, 4) ? "---" : "   ") << "o\n";
		break;
	default:
		cout << "Cannot print graph of this size";
	}
}
